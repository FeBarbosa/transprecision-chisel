;buildInfoPackage: chisel3, version: 3.2.5, scalaVersion: 2.12.10, sbtVersion: 1.3.2
circuit DoubleToFloat : 
  module DoubleToFloat : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip input : UInt<64>, output : UInt<32>}
    
    wire doubleTemp : UInt<64> @[DoubleToFloat.scala 18:24]
    wire sig : UInt<1> @[DoubleToFloat.scala 19:17]
    wire exp : UInt<8> @[DoubleToFloat.scala 20:17]
    wire frac : UInt<23> @[DoubleToFloat.scala 21:18]
    doubleTemp <= io.input @[DoubleToFloat.scala 25:14]
    node _T = bits(doubleTemp, 63, 63) @[DoubleToFloat.scala 27:20]
    sig <= _T @[DoubleToFloat.scala 27:7]
    node _T_1 = bits(doubleTemp, 62, 0) @[DoubleToFloat.scala 29:18]
    node _T_2 = eq(_T_1, UInt<63>("h00")) @[DoubleToFloat.scala 29:35]
    when _T_2 : @[DoubleToFloat.scala 29:54]
      exp <= UInt<8>("h00") @[DoubleToFloat.scala 30:9]
      frac <= UInt<23>("h00") @[DoubleToFloat.scala 31:10]
      skip @[DoubleToFloat.scala 29:54]
    else : @[DoubleToFloat.scala 32:109]
      node _T_3 = bits(doubleTemp, 62, 52) @[DoubleToFloat.scala 32:26]
      node _T_4 = eq(_T_3, UInt<11>("h07ff")) @[DoubleToFloat.scala 32:39]
      node _T_5 = eq(_T_4, UInt<1>("h01")) @[DoubleToFloat.scala 32:42]
      node _T_6 = bits(doubleTemp, 62, 52) @[DoubleToFloat.scala 32:75]
      node _T_7 = neq(_T_6, UInt<1>("h00")) @[DoubleToFloat.scala 32:87]
      node _T_8 = eq(_T_7, UInt<1>("h00")) @[DoubleToFloat.scala 32:90]
      node _T_9 = or(_T_5, _T_8) @[DoubleToFloat.scala 32:61]
      when _T_9 : @[DoubleToFloat.scala 32:109]
        node _T_10 = bits(doubleTemp, 62, 52) @[DoubleToFloat.scala 34:20]
        node _T_11 = eq(_T_10, UInt<11>("h07ff")) @[DoubleToFloat.scala 34:32]
        node _T_12 = eq(_T_11, UInt<1>("h01")) @[DoubleToFloat.scala 34:35]
        when _T_12 : @[DoubleToFloat.scala 34:53]
          exp <= UInt<8>("h07f") @[DoubleToFloat.scala 35:11]
          skip @[DoubleToFloat.scala 34:53]
        else : @[DoubleToFloat.scala 36:17]
          exp <= UInt<8>("h00") @[DoubleToFloat.scala 37:11]
          skip @[DoubleToFloat.scala 36:17]
        node _T_13 = bits(doubleTemp, 51, 29) @[DoubleToFloat.scala 40:23]
        frac <= _T_13 @[DoubleToFloat.scala 40:10]
        skip @[DoubleToFloat.scala 32:109]
      else : @[DoubleToFloat.scala 41:95]
        node _T_14 = bits(doubleTemp, 62, 62) @[DoubleToFloat.scala 41:25]
        node _T_15 = eq(_T_14, UInt<1>("h01")) @[DoubleToFloat.scala 41:30]
        node _T_16 = bits(doubleTemp, 61, 59) @[DoubleToFloat.scala 41:61]
        node _T_17 = neq(_T_16, UInt<1>("h00")) @[DoubleToFloat.scala 41:73]
        node _T_18 = neq(_T_17, UInt<1>("h00")) @[DoubleToFloat.scala 41:76]
        node _T_19 = and(_T_15, _T_18) @[DoubleToFloat.scala 41:48]
        when _T_19 : @[DoubleToFloat.scala 41:95]
          exp <= UInt<8>("h0fe") @[DoubleToFloat.scala 43:9]
          frac <= UInt<23>("h07fffff") @[DoubleToFloat.scala 44:10]
          skip @[DoubleToFloat.scala 41:95]
        else : @[DoubleToFloat.scala 46:96]
          node _T_20 = bits(doubleTemp, 62, 62) @[DoubleToFloat.scala 46:25]
          node _T_21 = eq(_T_20, UInt<1>("h00")) @[DoubleToFloat.scala 46:30]
          node _T_22 = bits(doubleTemp, 61, 59) @[DoubleToFloat.scala 46:61]
          node _T_23 = eq(_T_22, UInt<3>("h07")) @[DoubleToFloat.scala 46:74]
          node _T_24 = neq(_T_23, UInt<1>("h01")) @[DoubleToFloat.scala 46:77]
          node _T_25 = and(_T_21, _T_24) @[DoubleToFloat.scala 46:48]
          when _T_25 : @[DoubleToFloat.scala 46:96]
            exp <= UInt<8>("h01") @[DoubleToFloat.scala 48:9]
            frac <= UInt<23>("h00") @[DoubleToFloat.scala 49:10]
            skip @[DoubleToFloat.scala 46:96]
          else : @[DoubleToFloat.scala 51:15]
            node _T_26 = bits(doubleTemp, 62, 62) @[DoubleToFloat.scala 53:26]
            node _T_27 = bits(doubleTemp, 58, 52) @[DoubleToFloat.scala 53:42]
            node _T_28 = cat(_T_26, _T_27) @[Cat.scala 29:58]
            exp <= _T_28 @[DoubleToFloat.scala 53:9]
            node _T_29 = bits(doubleTemp, 51, 29) @[DoubleToFloat.scala 54:23]
            frac <= _T_29 @[DoubleToFloat.scala 54:10]
            skip @[DoubleToFloat.scala 51:15]
    node _T_30 = cat(sig, exp) @[Cat.scala 29:58]
    node _T_31 = cat(_T_30, frac) @[Cat.scala 29:58]
    io.output <= _T_31 @[DoubleToFloat.scala 58:13]
    
